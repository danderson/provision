package api

import (
	"net"
	"runtime"
	"testing"

	"github.com/digitalrebar/provision"
	"github.com/digitalrebar/provision/models"
)

func TestInfo(t *testing.T) {
	test := &crudTest{
		name: "get info",
		expectRes: &models.Info{
			Address:            net.IPv4(127, 0, 0, 1),
			ApiPort:            10011,
			FilePort:           10012,
			BinlPort:           10015,
			DhcpPort:           10014,
			TftpPort:           10013,
			ProvisionerEnabled: true,
			TftpEnabled:        true,
			BinlEnabled:        true,
			DhcpEnabled:        true,
			Stats: []models.Stat{
				{
					Name:  "machines.count",
					Count: 0,
				},
				{
					Name:  "subnets.count",
					Count: 0,
				},
			},
			Arch:    runtime.GOARCH,
			Os:      runtime.GOOS,
			Version: provision.RS_VERSION,
			Id:      "Fred",
			Features: []string{
				"api-v3",
				"sane-exit-codes",
				"common-blob-size",
				"change-stage-map",
				"job-exit-states",
				"package-repository-handling",
				"profileless-machine",
				"threaded-log-levels",
				"plugin-v2",
				"fsm-runner",
				"plugin-v2-safe-config",
				"workflows",
				"default-workflow",
				"http-range-header",
				"roles",
				"tenants",
			},
			License: models.LicenseBundle{Licenses: []models.License{}},
			Scopes: map[string]map[string]struct{}{
				"bootenvs": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"contents": map[string]struct{}{
					"create": struct{}{},
					"delete": struct{}{},
					"get":    struct{}{},
					"list":   struct{}{},
					"update": struct{}{},
				},
				"files": map[string]struct{}{
					"delete": struct{}{},
					"get":    struct{}{},
					"list":   struct{}{},
					"post":   struct{}{},
				},
				"info": map[string]struct{}{
					"get": struct{}{},
				},
				"interfaces": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"isos": map[string]struct{}{
					"delete": struct{}{},
					"get":    struct{}{},
					"list":   struct{}{},
					"post":   struct{}{},
				},
				"jobs": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"log":     struct{}{},
					"update":  struct{}{},
				},
				"leases": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"machines": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"params": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"plugin_providers": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"plugins": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"preferences": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"profiles": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"reservations": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"roles": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"stages": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"subnets": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"tasks": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"tenants": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"templates": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
				"users": map[string]struct{}{
					"action":   struct{}{},
					"actions":  struct{}{},
					"create":   struct{}{},
					"delete":   struct{}{},
					"get":      struct{}{},
					"list":     struct{}{},
					"password": struct{}{},
					"token":    struct{}{},
					"update":   struct{}{},
				},
				"workflows": map[string]struct{}{
					"action":  struct{}{},
					"actions": struct{}{},
					"create":  struct{}{},
					"delete":  struct{}{},
					"get":     struct{}{},
					"list":    struct{}{},
					"update":  struct{}{},
				},
			},
		},
		expectErr: nil,
		op: func() (interface{}, error) {
			return session.Info()
		},
	}
	test.run(t)

}
